definitions:
  controllers.SignupInput:
    properties:
      displayName:
        type: string
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - displayName
    - email
    - password
    - username
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  middelwares.LoginInput:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.Tweet:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      text:
        type: string
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/models.User'
      userID:
        type: integer
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      displayName:
        type: string
      email:
        type: string
      id:
        type: integer
      updatedAt:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: A twitter-like API implemented with Gin, GORM, and MySQL.
  title: Twitter with Gin and GORM
paths:
  /auth/current-user:
    get:
      consumes:
      - application/json
      description: check currently logged in user
      produces:
      - application/json
      responses:
        "200":
          description: ""
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: login
      parameters:
      - description: Login
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/middelwares.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: ""
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: logout
      produces:
      - application/json
      responses:
        "200":
          description: ""
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: create new user
      parameters:
      - description: Signup to create a new user
        in: body
        name: signup
        required: true
        schema:
          $ref: '#/definitions/controllers.SignupInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      tags:
      - auth
  /ping:
    get:
      description: ping the server.
      responses:
        "200":
          description: pong
          schema:
            type: string
      tags:
      - ping
  /users:
    get:
      description: get all users
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      tags:
      - users
  /users/{id}:
    get:
      description: get user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      tags:
      - users
  /users/{id}/tweets:
    get:
      description: get a user's tweets
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Tweet'
            type: array
      tags:
      - users
swagger: "2.0"
